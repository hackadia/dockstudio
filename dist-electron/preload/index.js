"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const electron = require("electron");
const os = require("os");
const electronStore = require("electron-store");
var EventsKeys = /* @__PURE__ */ ((EventsKeys2) => {
  EventsKeys2["SET_DNS"] = "dialogs:set-dns";
  EventsKeys2["CLEAR_DNS"] = "dialogs:clear-dns";
  EventsKeys2["ADD_DNS"] = "dialogs:add-dns";
  EventsKeys2["RELOAD_SERVER_LIST"] = "reloadServerList";
  EventsKeys2["FETCH_DNS_LIST"] = "dialogs:fetch_dns_list";
  EventsKeys2["NOTIFICATION"] = "notification";
  EventsKeys2["DIALOG_ERROR"] = "dialogs:d_error";
  EventsKeys2["OPEN_BROWSER"] = "dialogs:open_browser";
  EventsKeys2["GET_CURRENT_ACTIVE"] = "dialogs:get_current_active";
  EventsKeys2["DELETE_DNS"] = "DELETE_DNS";
  EventsKeys2["TOGGLE_THEME"] = "ui:toggleTheme";
  EventsKeys2["GET_SETTINGS"] = "setting:get";
  EventsKeys2["SET_NETWORK_INTERFACE"] = "setting:set_network_interface";
  EventsKeys2["GET_NETWORK_INTERFACE_LIST"] = "setting:get_network_interface_list";
  EventsKeys2["SAVE_SETTINGS"] = "setting:save";
  EventsKeys2["TOGGLE_START_UP"] = "setting:toggleStartUp";
  EventsKeys2["FLUSHDNS"] = "dialogs:flushDns";
  EventsKeys2["PING"] = "dialogs:ping";
  EventsKeys2["TOGGLE_PIN"] = "dialog:togglePin";
  EventsKeys2["CHECK_UPDATE"] = "CHECK_UPDATE";
  EventsKeys2["START_UPDATE"] = "START_UPDATE";
  EventsKeys2["UPDATE_PROGRESS"] = "UPDATE_PROGRESS";
  EventsKeys2["UPDATE_ERROR"] = "UPDATE_ERROR";
  EventsKeys2["CLOSE"] = "close";
  EventsKeys2["MINIMIZE"] = "MINIMIZE_APP";
  return EventsKeys2;
})(EventsKeys || {});
const serversConstant = [
  {
    key: "SHECAN",
    name: "Shecan",
    servers: ["178.22.122.100", "185.51.200.2"],
    avatar: "shecan.png",
    rate: 10,
    tags: ["Gaming", "Web", "Ai"],
    isPin: false
  },
  {
    key: "ELECTRO",
    name: "Electro Team",
    servers: ["78.157.42.100", "78.157.42.101"],
    avatar: "electro.png",
    rate: 9,
    tags: ["Gaming", "Web", "Ai"],
    isPin: false
  },
  {
    key: "RADAR_GAME",
    name: "Radar game",
    servers: ["10.202.10.10", "10.202.10.11"],
    avatar: "radar.png",
    rate: 5,
    tags: ["Gaming"],
    isPin: false
  },
  {
    key: "ClOUD_FLARE",
    name: "Cloudflare",
    servers: ["1.1.1.1", "1.0.0.1"],
    avatar: "cloudflare.png",
    rate: 0,
    tags: ["Web"],
    isPin: false
  }
];
const defaultSetting = {
  lng: "eng",
  autoUpdate: true,
  minimize_tray: false,
  network_interface: "Auto",
  use_analytic: true
};
const store = new electronStore({
  defaults: {
    dnsList: serversConstant,
    settings: defaultSetting
  },
  name: "dockstudioStore_1.9.0"
});
const ipcPreload = {
  setDns: (server) => electron.ipcRenderer.invoke(EventsKeys.SET_DNS, server),
  clearDns: () => electron.ipcRenderer.invoke(EventsKeys.CLEAR_DNS),
  notif: (message) => electron.ipcRenderer.send(EventsKeys.NOTIFICATION, message),
  dialogError: (title, message) => electron.ipcRenderer.send(EventsKeys.DIALOG_ERROR, title, message),
  openBrowser: (url) => electron.ipcRenderer.send(EventsKeys.OPEN_BROWSER, url),
  addDns: (data) => electron.ipcRenderer.invoke(EventsKeys.ADD_DNS, data),
  deleteDns: (server) => electron.ipcRenderer.invoke(EventsKeys.DELETE_DNS, server),
  reloadServerList: (servers) => electron.ipcRenderer.invoke(EventsKeys.RELOAD_SERVER_LIST, servers),
  fetchDnsList: () => electron.ipcRenderer.invoke(EventsKeys.FETCH_DNS_LIST),
  getCurrentActive: () => electron.ipcRenderer.invoke(EventsKeys.GET_CURRENT_ACTIVE),
  getSettings: () => electron.ipcRenderer.invoke(EventsKeys.GET_SETTINGS),
  toggleStartUP: () => electron.ipcRenderer.invoke(EventsKeys.TOGGLE_START_UP),
  flushDns: () => electron.ipcRenderer.invoke(EventsKeys.FLUSHDNS),
  saveSettings: (settings) => electron.ipcRenderer.invoke(EventsKeys.SAVE_SETTINGS, settings),
  ping: (server) => electron.ipcRenderer.invoke(EventsKeys.PING, server),
  checkUpdate: () => electron.ipcRenderer.invoke(EventsKeys.CHECK_UPDATE),
  startUpdate: () => electron.ipcRenderer.invoke(EventsKeys.START_UPDATE),
  on: (string, cb) => electron.ipcRenderer.on(string, cb),
  off: (string, cb) => electron.ipcRenderer.on(string, cb),
  close: () => electron.ipcRenderer.send(EventsKeys.CLOSE),
  minimize: () => electron.ipcRenderer.send(EventsKeys.MINIMIZE),
  togglePinServer: (server) => electron.ipcRenderer.invoke(EventsKeys.TOGGLE_PIN, server)
};
const uiPreload = {
  toggleTheme: (newTheme) => electron.ipcRenderer.invoke(EventsKeys.TOGGLE_THEME, newTheme)
};
const osItems = {
  os: os.platform(),
  getInterfaces: () => electron.ipcRenderer.invoke(EventsKeys.GET_NETWORK_INTERFACE_LIST)
};
const storePreload = {
  get: (key) => store.get(key)
};
electron.contextBridge.exposeInMainWorld("ui", uiPreload);
electron.contextBridge.exposeInMainWorld("ipc", ipcPreload);
electron.contextBridge.exposeInMainWorld("os", osItems);
electron.contextBridge.exposeInMainWorld("storePreload", storePreload);
exports.ipcPreload = ipcPreload;
exports.osItems = osItems;
exports.storePreload = storePreload;
exports.uiPreload = uiPreload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
