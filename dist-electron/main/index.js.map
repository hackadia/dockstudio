{"version":3,"file":"index.js","sources":["../../src/main/shared/getIconPath.ts","../../src/shared/constants/eventsKeys.constant.ts","../../src/shared/constants/servers.cosntant.ts","../../src/shared/constants/default-setting.contant.ts","../../src/main/store/store.ts","../../src/main/update.ts","../../src/main/shared/file.ts","../../node_modules/@aptabase/electron/dist/main.es.js","../../src/main/services/dns.service.ts","../../src/main/platforms/platform.ts","../../src/main/platforms/linux/linux.platform.ts","../../src/main/platforms/windows/windows.platform.ts","../../src/main/platforms/mac/mac.platform.ts","../../src/main/config.ts","../../src/main/ipc/setting.ts","../../src/main/ipc/ui.ts","../../src/main/ipc/notif.ts","../../src/shared/validators/dns.validator.ts","../../src/i18n/i18n-util.ts","../../src/i18n/formatters.ts","../../src/i18n/eng/index.ts","../../src/i18n/fa/index.ts","../../src/i18n/ru/index.ts","../../src/i18n/i18n-util.sync.ts","../../src/i18n/i18n-node.ts","../../src/main/shared/logger.ts","../../src/main/shared/overlayIcon.ts","../../src/main/ipc/dialogs.ts","../../src/main/index.ts"],"sourcesContent":["import path from \"path\";\r\nimport { join } from \"node:path\";\r\n\r\nexport function getIconPath(): string {\r\n  let icon;\r\n  switch (process.platform) {\r\n    case \"win32\":\r\n      icon = path.join(process.env.PUBLIC, \"icons/icon.ico\");\r\n      break;\r\n    case \"darwin\":\r\n      icon = path.join(process.env.PUBLIC, \"icons/icon.ico\");\r\n      break;\r\n    case \"linux\":\r\n      icon = path.join(process.env.PUBLIC, \"icons/icon.png\");\r\n      break;\r\n    default:\r\n      icon = path.join(process.env.PUBLIC, \"icons/icon.ico\");\r\n      break;\r\n  }\r\n  return icon;\r\n}\r\n","export enum EventsKeys {\r\n  SET_DNS = \"dialogs:set-dns\",\r\n  CLEAR_DNS = \"dialogs:clear-dns\",\r\n  ADD_DNS = \"dialogs:add-dns\",\r\n  RELOAD_SERVER_LIST = \"reloadServerList\",\r\n  FETCH_DNS_LIST = \"dialogs:fetch_dns_list\",\r\n  NOTIFICATION = \"notification\",\r\n  DIALOG_ERROR = \"dialogs:d_error\",\r\n  OPEN_BROWSER = \"dialogs:open_browser\",\r\n  GET_CURRENT_ACTIVE = \"dialogs:get_current_active\",\r\n  DELETE_DNS = \"DELETE_DNS\",\r\n  TOGGLE_THEME = \"ui:toggleTheme\",\r\n  GET_SETTINGS = \"setting:get\",\r\n  SET_NETWORK_INTERFACE = \"setting:set_network_interface\",\r\n  GET_NETWORK_INTERFACE_LIST = \"setting:get_network_interface_list\",\r\n  SAVE_SETTINGS = \"setting:save\",\r\n  TOGGLE_START_UP = \"setting:toggleStartUp\",\r\n  FLUSHDNS = \"dialogs:flushDns\",\r\n  PING = \"dialogs:ping\",\r\n  TOGGLE_PIN = \"dialog:togglePin\",\r\n  CHECK_UPDATE = \"CHECK_UPDATE\",\r\n  START_UPDATE = \"START_UPDATE\",\r\n  UPDATE_PROGRESS = \"UPDATE_PROGRESS\",\r\n  UPDATE_ERROR = \"UPDATE_ERROR\",\r\n  CLOSE = \"close\",\r\n  MINIMIZE = \"MINIMIZE_APP\",\r\n}\r\n","import { Server, ServerStore } from \"../interfaces/server.interface\";\r\n\r\nexport const serversConstant: Array<ServerStore> = [\r\n  {\r\n    key: \"SHECAN\",\r\n    name: \"Shecan\",\r\n    servers: [\"178.22.122.100\", \"185.51.200.2\"],\r\n    avatar: \"shecan.png\",\r\n    rate: 10,\r\n    tags: [\"Gaming\", \"Web\", \"Ai\"],\r\n    isPin: false,\r\n  },\r\n  {\r\n    key: \"ELECTRO\",\r\n    name: \"Electro Team\",\r\n    servers: [\"78.157.42.100\", \"78.157.42.101\"],\r\n    avatar: \"electro.png\",\r\n    rate: 9,\r\n    tags: [\"Gaming\", \"Web\", \"Ai\"],\r\n    isPin: false,\r\n  },\r\n  {\r\n    key: \"RADAR_GAME\",\r\n    name: \"Radar game\",\r\n    servers: [\"10.202.10.10\", \"10.202.10.11\"],\r\n    avatar: \"radar.png\",\r\n    rate: 5,\r\n    tags: [\"Gaming\"],\r\n    isPin: false,\r\n  },\r\n\r\n  {\r\n    key: \"ClOUD_FLARE\",\r\n    name: \"Cloudflare\",\r\n    servers: [\"1.1.1.1\", \"1.0.0.1\"],\r\n    avatar: \"cloudflare.png\",\r\n    rate: 0,\r\n    tags: [\"Web\"],\r\n    isPin: false,\r\n  },\r\n];\r\n","import { SettingInStore } from \"../interfaces/settings.interface\";\r\n\r\nexport const defaultSetting: SettingInStore = {\r\n  lng: \"eng\",\r\n  autoUpdate: true,\r\n  minimize_tray: false,\r\n  network_interface: \"Auto\",\r\n  use_analytic: true,\r\n};\r\n","import electronStore from \"electron-store\";\r\n\r\nimport { serversConstant } from \"../../shared/constants/servers.cosntant\";\r\nimport {\r\n  SettingInStore,\r\n  StoreKey,\r\n} from \"../../shared/interfaces/settings.interface\";\r\nimport { defaultSetting } from \"../../shared/constants/default-setting.contant\";\r\nimport { ServerStore } from \"../../shared/interfaces/server.interface\";\r\n\r\nexport const store = new electronStore<StoreKey>({\r\n  defaults: {\r\n    dnsList: serversConstant,\r\n    settings: defaultSetting,\r\n  },\r\n  name: \"dockstudioStore_1.9.0\",\r\n});\r\n","import {\r\n  autoUpdater,\r\n  UpdateCheckResult,\r\n  UpdateDownloadedEvent,\r\n} from \"electron-updater\";\r\nimport { ipcMain } from \"electron\";\r\nimport { EventsKeys } from \"../shared/constants/eventsKeys.constant\";\r\nimport { ProgressInfo } from \"electron-builder\";\r\nimport * as path from \"path\";\r\nimport isDev from \"electron-is-dev\";\r\nimport { store } from \"./store/store\";\r\nimport ms from \"ms\";\r\nexport function update(win: Electron.BrowserWindow, app: Electron.App) {\r\n  autoUpdater.autoDownload = store.get(\"settings\").autoUpdate;\r\n  autoUpdater.disableWebInstaller = false;\r\n\r\n  if (isDev) autoUpdater.updateConfigPath = path.resolve(\"dev-app-update.yml\");\r\n\r\n  autoUpdater.allowDowngrade = false;\r\n  autoUpdater.fullChangelog = true;\r\n\r\n  autoUpdater.logger = require(\"electron-log\");\r\n\r\n  autoUpdater.setFeedURL({\r\n    provider: \"github\",\r\n    owner: \"hackadia\",\r\n    repo: \"dockstudio\",\r\n  });\r\n\r\n  autoUpdater.on(\"checking-for-update\", function () {\r\n    autoUpdater.logger.info(\"checking....\");\r\n  });\r\n\r\n  autoUpdater.on(\"update-available\", (arg) => {\r\n    win.webContents.send(\"update-can-available\", {\r\n      update: true,\r\n      version: app.getVersion(),\r\n      notes: arg.releaseNotes,\r\n      newVersion: arg?.version,\r\n    });\r\n  });\r\n\r\n  autoUpdater.on(\"update-not-available\", (arg) => {\r\n    win.webContents.send(\"update-can-available\", {\r\n      update: false,\r\n      version: app.getVersion(),\r\n      newVersion: arg?.version,\r\n    });\r\n    autoUpdater.logger.info(\"update not found\");\r\n  });\r\n\r\n  autoUpdater.on(\"error\", (x) => {\r\n    autoUpdater.logger.error(x.message);\r\n  });\r\n\r\n  autoUpdater.on(\"update-downloaded\", (info) => {\r\n    autoUpdater.quitAndInstall(false, true);\r\n  });\r\n\r\n  ipcMain.handle(EventsKeys.CHECK_UPDATE, async () => {\r\n    if (!app.isPackaged) {\r\n      const error = new Error(\r\n        \"The update feature is only available after the package.\"\r\n      );\r\n      return { message: error.message, error };\r\n    }\r\n\r\n    try {\r\n      const update: UpdateCheckResult = await autoUpdater.checkForUpdates();\r\n\r\n      return { updateInfo: update?.updateInfo || null };\r\n    } catch (error: any) {\r\n      autoUpdater.logger.error(error.message);\r\n      return { message: \"Network error\", error, isError: true };\r\n    }\r\n  });\r\n\r\n  ipcMain.handle(EventsKeys.START_UPDATE, async (event, args) => {\r\n    startDownload(\r\n      (error: Error | null, progressInfo: ProgressInfo) => {\r\n        if (error) {\r\n          event.sender.send(EventsKeys.UPDATE_ERROR, {\r\n            message: error.message,\r\n            error,\r\n          });\r\n        } else {\r\n          autoUpdater.logger.info(progressInfo);\r\n          event.sender.send(EventsKeys.UPDATE_PROGRESS, progressInfo);\r\n        }\r\n      },\r\n      () => autoUpdater.quitAndInstall(false, true)\r\n    );\r\n  });\r\n  async function checkUpdate() {\r\n    try {\r\n      if (autoUpdater.autoDownload) {\r\n        autoUpdater.logger.info(\"start Checking Update...\");\r\n        return await autoUpdater.checkForUpdates();\r\n      }\r\n    } catch (error: any) {\r\n      autoUpdater.logger.error(error.message);\r\n    }\r\n  }\r\n  if (autoUpdater.autoDownload && !isDev) {\r\n    checkUpdate();\r\n    setInterval(() => {\r\n      autoUpdater.autoDownload = store.get(\"settings\").autoUpdate;\r\n      checkUpdate();\r\n    }, ms(\"2h\"));\r\n  }\r\n}\r\n\r\ntype cb = (error: Error | null, info: ProgressInfo | null) => void;\r\ntype complete = (event: UpdateDownloadedEvent) => void;\r\nfunction startDownload(callback: cb, complete: complete) {\r\n  autoUpdater.on(\"download-progress\", (info) => callback(null, info));\r\n  autoUpdater.on(\"error\", (err) => callback(err, null));\r\n  autoUpdater.on(\"update-downloaded\", complete);\r\n  autoUpdater.downloadUpdate().catch((e) => callback(e, null));\r\n}\r\n","import { access, constants as fileConstant } from \"fs/promises\";\r\nimport { Server } from \"../../shared/interfaces/server.interface\";\r\nimport { join } from \"node:path\";\r\n\r\nexport async function checkFileExists(filePath: string): Promise<boolean> {\r\n  try {\r\n    await access(filePath, fileConstant.F_OK);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getOverlayIcon(server: Server): Promise<string> {\r\n  // let filepath = join(process.env.PUBLIC, `servers-icon/${server.avatar}`);\r\n  // const isValidate =\r\n  //   server.avatar != \"def.png\" ? await checkFileExists(filepath) : false;\r\n  // if (!isValidate) {\r\n  //   filepath = join(process.env.PUBLIC, `icons/icon-connected.png`);\r\n  // }\r\n  return getPublicFilePath(`icons/icon-connected.png`);\r\n}\r\n\r\nexport function getPublicFilePath(filePath: string): string {\r\n  return join(process.env.PUBLIC, filePath);\r\n}\r\n","import { app as d, net as A, protocol as w } from \"electron\";\nimport { exec as N } from \"child_process\";\nimport { readFile as O } from \"fs\";\nimport { release as P } from \"os\";\nconst k = \"aptabase-electron@0.2.2\";\nasync function D(e) {\n  const [n, t] = await U();\n  return {\n    appVersion: e.getVersion(),\n    isDebug: !e.isPackaged,\n    locale: e.getLocale(),\n    osName: n,\n    osVersion: t,\n    engineName: \"Chromium\",\n    engineVersion: process.versions.chrome,\n    sdkVersion: k\n  };\n}\nasync function U() {\n  switch (process.platform) {\n    case \"win32\":\n      return [\"Windows\", P()];\n    case \"darwin\":\n      return [\"macOS\", await E()];\n    default:\n      return await T();\n  }\n}\nasync function E() {\n  try {\n    return (await new Promise((n, t) => {\n      N(\n        \"/usr/bin/sw_vers -productVersion\",\n        (s, r) => {\n          if (s) {\n            t(s);\n            return;\n          }\n          n(r);\n        }\n      );\n    })).trim();\n  } catch {\n    return \"\";\n  }\n}\nasync function T() {\n  try {\n    const n = (await new Promise((l, a) => {\n      O(\n        \"/etc/os-release\",\n        \"utf8\",\n        (c, i) => {\n          if (c) {\n            a(c);\n            return;\n          }\n          l(i);\n        }\n      );\n    })).split(`\n`), t = {};\n    for (const l of n) {\n      const [a, c] = l.split(\"=\");\n      a && c && (t[a] = c.replace(/\"/g, \"\"));\n    }\n    const s = t.NAME ?? \"Linux\", r = t.VERSION_ID ?? \"\";\n    return [s, r];\n  } catch {\n    return [\"Linux\", \"\"];\n  }\n}\nconst f = require(\"crypto\");\nfunction S() {\n  return f && f.randomUUID ? f.randomUUID() : [\n    p(8),\n    p(4),\n    p(4),\n    p(4),\n    p(12)\n  ].join(\"-\");\n}\nconst y = \"abcdefghijklmnopqrstuvwxyz0123456789\", _ = y.length;\nfunction p(e) {\n  let n = \"\";\n  for (let t = 0; t < e; t++)\n    n += y.charAt(Math.floor(Math.random() * _));\n  return n;\n}\nconst M = 1 * 60 * 60;\nlet h = S(), b = /* @__PURE__ */ new Date(), m = \"\", V = \"\", o;\nconst v = {\n  US: \"https://us.aptabase.com\",\n  EU: \"https://eu.aptabase.com\",\n  DEV: \"http://localhost:3000\",\n  SH: \"\"\n};\nasync function R(e, n) {\n  if (d.isReady()) {\n    console.warn(\n      \"Aptabase: `initialize` must be invoked before the app is ready. Tracking will be disabled.\"\n    );\n    return;\n  }\n  const t = e.split(\"-\");\n  if (t.length !== 3 || v[t[1]] === void 0) {\n    console.warn(\n      `Aptabase: App Key \"${e}\" is invalid. Tracking will be disabled.`\n    );\n    return;\n  }\n  H(), await d.whenReady(), C(), V = `${F(t[1], n)}/api/v0/event`, o = await D(d), m = e, x();\n}\nconst g = [];\nfunction I(e, n) {\n  if (!m || !o)\n    return g.push({ eventName: e, props: n }), Promise.resolve();\n  let t = /* @__PURE__ */ new Date();\n  const s = t.getTime() - b.getTime();\n  Math.floor(s / 1e3) > M && (h = S()), b = t;\n  const l = {\n    timestamp: t.toISOString(),\n    sessionId: h,\n    eventName: e,\n    systemProps: {\n      isDebug: o.isDebug,\n      locale: o.locale,\n      osName: o.osName,\n      osVersion: o.osVersion,\n      engineName: o.engineName,\n      engineVersion: o.engineVersion,\n      appVersion: o.appVersion,\n      sdkVersion: o.sdkVersion\n    },\n    props: n\n  };\n  return new Promise((a) => {\n    const c = (u) => {\n      console.error(\"Aptabase: Failed to send event\", u), a();\n    }, i = A.request({\n      method: \"POST\",\n      url: V,\n      credentials: \"omit\"\n    });\n    i.setHeader(\"Content-Type\", \"application/json\"), i.setHeader(\"App-Key\", m), i.on(\"error\", c), i.on(\"abort\", c), i.on(\"response\", (u) => {\n      u.statusCode >= 300 && console.warn(\n        `Aptabase: Failed to send event \"${e}\": ${u.statusCode} ${u.statusMessage}`\n      ), a();\n    }), i.write(JSON.stringify(l)), i.end();\n  });\n}\nfunction x() {\n  for (; g.length > 0; ) {\n    const e = g.shift();\n    e && I(e.eventName, e.props);\n  }\n}\nfunction H() {\n  w.registerSchemesAsPrivileged([\n    {\n      scheme: \"aptabase-ipc\",\n      privileges: {\n        bypassCSP: !0,\n        corsEnabled: !0,\n        supportFetchAPI: !0,\n        secure: !0\n      }\n    }\n  ]);\n}\nfunction C() {\n  w.registerStringProtocol(\"aptabase-ipc\", (e, n) => {\n    var t, s;\n    try {\n      const r = (s = (t = e.uploadData) == null ? void 0 : t[0]) == null ? void 0 : s.bytes, { eventName: l, props: a } = JSON.parse((r == null ? void 0 : r.toString()) ?? \"{}\");\n      I(l, a);\n    } catch (r) {\n      console.error(\"Aptabase: Failed to send event\", r);\n    }\n    n(\"\");\n  });\n}\nfunction F(e, n) {\n  if (e === \"SH\") {\n    if (!(n != null && n.host)) {\n      console.warn(\n        \"Aptabase: Host parameter must be defined when using Self-Hosted App Key. Tracking will be disabled.\"\n      );\n      return;\n    }\n    return n.host;\n  }\n  return v[e];\n}\nexport {\n  R as initialize,\n  I as trackEvent\n};\n","import { Platform } from \"../platforms/platform\";\r\n\r\nexport class DnsService {\r\n  constructor(private platform: Platform) {}\r\n\r\n  async setDns(nameServers: Array<string>) {\r\n    return this.platform.setDns(nameServers);\r\n  }\r\n\r\n  async getActiveDns() {\r\n    return this.platform.getActiveDns();\r\n  }\r\n\r\n  async clearDns() {\r\n    return this.platform.clearDns();\r\n  }\r\n\r\n  async getInterfacesList() {\r\n    return this.platform.getInterfacesList();\r\n  }\r\n\r\n  async flushDns() {\r\n    return this.platform.flushDns();\r\n  }\r\n}\r\n","import sudo from \"sudo-prompt\";\r\n\r\nexport abstract class Platform {\r\n  public abstract setDns(nameServers: string[]): Promise<void>;\r\n\r\n  public abstract getActiveDns(): Promise<string[]>;\r\n\r\n  public abstract clearDns(): Promise<void>;\r\n\r\n  public abstract getInterfacesList(): Promise<any>;\r\n\r\n  public abstract flushDns(): Promise<void>;\r\n\r\n  protected execCmd(cmd: string): Promise<string | Buffer> {\r\n    return new Promise((resolve, reject) => {\r\n      sudo.exec(cmd, { name: \"dockstudio\" }, (error, stdout) => {\r\n        if (error) {\r\n          reject(error);\r\n          return;\r\n        }\r\n        resolve(stdout);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Platform } from \"../platform\";\r\n\r\nexport class LinuxPlatform extends Platform {\r\n  async clearDns(): Promise<void> {\r\n    try {\r\n      await this.setDns([\"1.1.1.1\", \"8.8.8.8\", \"192.168.1.1\", \"127.0.0.1\"]);\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async getActiveDns(): Promise<Array<string>> {\r\n    try {\r\n      const cmd = \"grep nameserver /etc/resolv.conf | awk '{print $2}'\";\r\n      const text = (await this.execCmd(cmd)) as string;\r\n\r\n      const regex = /(?<=nameserver\\s)\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/g;\r\n      return text.trim().match(regex);\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async getInterfacesList(): Promise<any> {\r\n    return [];\r\n  }\r\n\r\n  async setDns(nameServers: Array<string>): Promise<void> {\r\n    try {\r\n      let lines = \"\";\r\n\r\n      for (let i = 0; i < nameServers.length; i++) {\r\n        lines += `nameserver ${nameServers[i]}\\n`;\r\n      }\r\n\r\n      const cmd = `echo '${lines.trim()}' > /etc/resolv.conf`;\r\n      await this.execCmd(cmd);\r\n\r\n      const cmdRestart = \"systemctl restart systemd-networkd\";\r\n      await this.execCmd(cmdRestart);\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  public async flushDns(): Promise<void> {\r\n    try {\r\n      await this.execCmd(\"systemd-resolve --flush-caches\");\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n// Powered by ChatGpt\r\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nimport network from \"network\";\r\nimport sudo from \"sudo-prompt\";\r\n\r\nimport { Platform } from \"../platform\";\r\nimport { Interface } from \"./interfaces/interface\";\r\nimport os from \"os\";\r\nimport { store } from \"../../store/store\";\r\n\r\nexport class WindowsPlatform extends Platform {\r\n  async clearDns(): Promise<void> {\r\n    try {\r\n      let networkInterface = store.get(\"settings\").network_interface;\r\n      if (networkInterface == \"Auto\")\r\n        networkInterface = (await this.getValidateInterface()).name;\r\n\r\n      return new Promise((resolve, reject) => {\r\n        sudo.exec(\r\n          `netsh interface ip set dns \"${networkInterface}\" dhcp`,\r\n          {\r\n            name: \"dockstudio\",\r\n          },\r\n          (error) => {\r\n            if (error) {\r\n              reject(error);\r\n              return;\r\n            }\r\n            resolve();\r\n          }\r\n        );\r\n      });\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async getActiveDns(): Promise<Array<string>> {\r\n    try {\r\n      let networkInterface = store.get(\"settings\").network_interface;\r\n      if (networkInterface == \"Auto\")\r\n        networkInterface = (await this.getValidateInterface()).name;\r\n\r\n      const cmd = `netsh interface ip show dns \"${networkInterface}\"`;\r\n      const text = (await this.execCmd(cmd)) as string;\r\n\r\n      return this.extractDns(text);\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  getInterfacesList(): Promise<Interface[]> {\r\n    return new Promise((resolve, reject) => {\r\n      network.get_interfaces_list((err: any, obj: any) => {\r\n        if (err) reject(err);\r\n        else resolve(obj);\r\n      });\r\n    });\r\n  }\r\n\r\n  async setDns(nameServers: Array<string>): Promise<void> {\r\n    try {\r\n      let networkInterface = store.get(\"settings\").network_interface;\r\n      if (networkInterface == \"Auto\")\r\n        networkInterface = (await this.getValidateInterface()).name;\r\n      const cmdServer1 = `netsh interface ip set dns \"${networkInterface}\" static ${nameServers[0]}`;\r\n\r\n      await this.execCmd(cmdServer1);\r\n\r\n      if (nameServers[1]) {\r\n        const cmdServer2 = `netsh interface ip add dns \"${networkInterface}\" ${nameServers[1]} index=2`;\r\n        await this.execCmd(cmdServer2);\r\n      }\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  private async getValidateInterface() {\r\n    try {\r\n      const interfaces: Interface[] = await this.getInterfacesList();\r\n      const activeInterface: Interface | null = interfaces.find(\r\n        (inter: Interface) => inter.gateway_ip != null\r\n      );\r\n\r\n      if (!activeInterface) throw new Error(\"CONNECTION_FAILED\");\r\n      return activeInterface;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private extractDns(input: string): Array<string> {\r\n    const regex = /Statically Configured DNS Servers:\\s+([\\d.]+)\\s+([\\d.]+)/gm;\r\n    const matches = regex.exec(input) || [];\r\n    if (!matches.length) return [];\r\n    return [matches[1].trim(), matches[2].trim()];\r\n  }\r\n\r\n  public async flushDns(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      sudo.exec(\r\n        `ipconfig /flushdns`,\r\n        {\r\n          name: \"dockstudio\",\r\n        },\r\n        (error) => {\r\n          if (error) {\r\n            reject(error);\r\n            return;\r\n          }\r\n          resolve();\r\n        }\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { exec } from \"child_process\";\r\nimport { promisify } from \"util\";\r\nimport { Platform } from \"../platform\";\r\n\r\nconst execPromise = promisify(exec);\r\n\r\nexport class MacPlatform extends Platform {\r\n  async clearDns(): Promise<void> {\r\n    try {\r\n      await this.setDns([\"8.8.8.8\", \"8.8.4.4\"]);\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async getActiveDns(): Promise<string[]> {\r\n    try {\r\n      const { stdout } = await execPromise(\r\n        \"scutil --dns | awk '/nameserver/ { print $3 }'\"\r\n      );\r\n\r\n      return stdout.trim().split(\"\\n\");\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  async getInterfacesList(): Promise<any> {\r\n    // Implement the logic to retrieve the list of interfaces for macOS here\r\n    // Example: You can use the \"networksetup\" command to get the list of interfaces\r\n    // For simplicity, I'm returning an empty array for now\r\n    return [];\r\n  }\r\n\r\n  async setDns(nameServers: string[]): Promise<void> {\r\n    try {\r\n      const dnsServers = nameServers.join(\" \");\r\n\r\n      await execPromise(`networksetup -setdnsservers Wi-Fi ${dnsServers}`);\r\n\r\n      try{\r\n        await execPromise(`networksetup -setdnsservers Ethernet ${dnsServers}`);\r\n      }catch (e) {\r\n        // ignore if device don't have Ethernet\r\n      }\r\n\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  public async flushDns(): Promise<void> {\r\n    try {\r\n      await execPromise(\"sudo killall -HUP mDNSResponder\");\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n","import os from \"os\";\r\nimport { app } from \"electron\";\r\nimport AutoLaunch from \"auto-launch\";\r\n\r\nimport { Platform } from \"./platforms/platform\";\r\nimport { DnsService } from \"./services/dns.service\";\r\nimport { LinuxPlatform } from \"./platforms/linux/linux.platform\";\r\nimport { WindowsPlatform } from \"./platforms/windows/windows.platform\";\r\nimport { MacPlatform } from \"./platforms/mac/mac.platform\";\r\n\r\nlet platform: Platform;\r\n\r\nswitch (os.platform()) {\r\n  case \"win32\":\r\n    platform = new WindowsPlatform();\r\n    break;\r\n  case \"linux\":\r\n    platform = new LinuxPlatform();\r\n    break;\r\n  case \"darwin\":\r\n    platform = new MacPlatform();\r\n    break;\r\n  default:\r\n    throw new Error(\"INVALID_PLATFORM\");\r\n}\r\n\r\nexport const dnsService: DnsService = new DnsService(platform);\r\n\r\nexport const autoLauncher = new AutoLaunch({\r\n  name: app.getName(),\r\n  isHidden: false, // show the app on startup\r\n  mac: {\r\n    useLaunchAgent: true, // use a launch agent instead of a launch daemon (macOS only)\r\n  },\r\n});\r\n","import { ipcMain } from \"electron\";\r\nimport { store } from \"../store/store\";\r\nimport { autoLauncher } from \"../config\";\r\nimport { EventsKeys } from \"../../shared/constants/eventsKeys.constant\";\r\n\r\nimport { Settings } from \"../../shared/interfaces/settings.interface\";\r\n\r\nipcMain.handle(EventsKeys.SAVE_SETTINGS, function (event, data: Settings) {\r\n  store.set(\"settings\", data);\r\n  return { success: true, data };\r\n});\r\nipcMain.handle(EventsKeys.TOGGLE_START_UP, async () => {\r\n  let startUp = await autoLauncher.isEnabled();\r\n\r\n  if (startUp) {\r\n    await autoLauncher.disable();\r\n    startUp = false;\r\n  } else {\r\n    await autoLauncher.enable();\r\n    startUp = true;\r\n  }\r\n\r\n  return startUp;\r\n});\r\n\r\nipcMain.handle(EventsKeys.GET_SETTINGS, async () => {\r\n  const settings: Settings = {\r\n    startUp: false,\r\n    ...store.get(\"settings\"),\r\n  };\r\n\r\n  settings.startUp = await autoLauncher.isEnabled();\r\n  return settings;\r\n});\r\n","import { ipcMain, nativeTheme } from \"electron\";\r\n\r\nimport { EventsKeys } from \"../../shared/constants/eventsKeys.constant\";\r\n\r\nipcMain.handle(EventsKeys.TOGGLE_THEME, (_event, data) => {\r\n  nativeTheme.themeSource = data;\r\n  return nativeTheme.shouldUseDarkColors\r\n});\r\n","import { Notification, ipcMain, nativeImage } from \"electron\";\r\n\r\nimport { getIconPath } from \"../shared/getIconPath\";\r\nimport { EventsKeys } from \"../../shared/constants/eventsKeys.constant\";\r\n\r\nipcMain.on(EventsKeys.NOTIFICATION, (_event, data) => {\r\n  // new Notification({ title: \"Dock Studio\", body: data, icon }).show();\r\n  notfi(\"Dock Studio\", data);\r\n});\r\n\r\nexport function notfi(title: string, message: string) {\r\n  const icon = nativeImage.createFromPath(getIconPath());\r\n  new Notification({ title, body: message, icon }).show();\r\n}\r\n","import { isIPv4 } from 'net';\r\nexport function isValidDnsAddress(value: string) {\r\n  return isIPv4(value)\r\n}\r\n","// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.\r\n/* eslint-disable */\r\n\r\nimport { i18n as initI18n, i18nObject as initI18nObject, i18nString as initI18nString } from 'typesafe-i18n'\r\nimport type { LocaleDetector } from 'typesafe-i18n/detectors'\r\nimport type { LocaleTranslationFunctions, TranslateByString } from 'typesafe-i18n'\r\nimport { detectLocale as detectLocaleFn } from 'typesafe-i18n/detectors'\r\nimport { initExtendDictionary } from 'typesafe-i18n/utils'\r\nimport type { Formatters, Locales, Translations, TranslationFunctions } from './i18n-types'\r\n\r\nexport const baseLocale: Locales = 'fa'\r\n\r\nexport const locales: Locales[] = [\r\n\t'eng',\r\n\t'fa',\r\n\t'ru'\r\n]\r\n\r\nexport const isLocale = (locale: string): locale is Locales => locales.includes(locale as Locales)\r\n\r\nexport const loadedLocales: Record<Locales, Translations> = {} as Record<Locales, Translations>\r\n\r\nexport const loadedFormatters: Record<Locales, Formatters> = {} as Record<Locales, Formatters>\r\n\r\nexport const extendDictionary = initExtendDictionary<Translations>()\r\n\r\nexport const i18nString = (locale: Locales): TranslateByString => initI18nString<Locales, Formatters>(locale, loadedFormatters[locale])\r\n\r\nexport const i18nObject = (locale: Locales): TranslationFunctions =>\r\n\tinitI18nObject<Locales, Translations, TranslationFunctions, Formatters>(\r\n\t\tlocale,\r\n\t\tloadedLocales[locale],\r\n\t\tloadedFormatters[locale]\r\n\t)\r\n\r\nexport const i18n = (): LocaleTranslationFunctions<Locales, Translations, TranslationFunctions> =>\r\n\tinitI18n<Locales, Translations, TranslationFunctions, Formatters>(loadedLocales, loadedFormatters)\r\n\r\nexport const detectLocale = (...detectors: LocaleDetector[]): Locales => detectLocaleFn<Locales>(baseLocale, locales, ...detectors)\r\n","import type { FormattersInitializer } from 'typesafe-i18n'\r\nimport type { Locales, Formatters } from './i18n-types'\r\n\r\nexport const initFormatters: FormattersInitializer<Locales, Formatters> = (locale: Locales) => {\r\n\r\n\tconst formatters: Formatters = {\r\n\t\t// add your formatter functions here\r\n\t}\r\n\r\n\treturn formatters\r\n}\r\n","import type { Translation } from \"../i18n-types\";\r\n\r\nconst eng: Translation = {\r\n  pages: {\r\n    home: {\r\n      homeTitle: \"Dock Studio\",\r\n      connectedHTML: \"Connected to <u>{currentActive}</u>\",\r\n      connected: \"Connected to {currentActive}\",\r\n      disconnected: \"Disconnected\",\r\n      unknownServer: \"connected to an unknown server.\",\r\n    },\r\n    settings: {\r\n      title: \"Settings\",\r\n      autoRunningTitle:\r\n        \"Automatic execution of the program when the system is turned on\",\r\n      langChanger: \"Language Changer\",\r\n      themeChanger: \"Theme\",\r\n    },\r\n    addCustomDns: {\r\n      NameOfServer: \"Server name\",\r\n      serverAddr: \"Server address\",\r\n    },\r\n  },\r\n  themeChanger: {\r\n    dark: \"Dark\",\r\n    light: \"Light\",\r\n  },\r\n  buttons: {\r\n    update: \"Update the list\",\r\n    favDnsServer: \"Adding a custom (DNS) server\",\r\n    add: \"Add\",\r\n    flushDns: \"Flush\",\r\n    ping: \"Ping\",\r\n  },\r\n  waiting: \"Please wait...\",\r\n  disconnecting: \"disconnecting...\",\r\n  connecting: \"connecting...\",\r\n  successful: \"successful\",\r\n  help_connect: \"Click to connect\",\r\n  help_disconnect: \"Click to disconnect\",\r\n  dialogs: {\r\n    fetching_data_from_repo: \"fetching data from repository...\",\r\n    removed_server: \"{serverName} was successfully removed from the list.\",\r\n    added_server: \"Server {serverName} successfully added.\",\r\n    flush_successful: \"The flush was successful.\",\r\n    flush_failure: \"The flush failed.\",\r\n  },\r\n  errors: {\r\n    error_fetching_data: \"Error in receiving data from the {target}\",\r\n  },\r\n  validator: {\r\n    invalid_dns1: \"DNS value 1 is not valid.\",\r\n    invalid_dns2: \"DNS value 2 is not valid.\",\r\n    dns1_dns2_duplicates: \"DNS 1 and DNS 2 values must not be duplicates.\",\r\n  },\r\n  version: \"version\",\r\n};\r\n\r\nexport default eng;\r\n","import { BaseTranslation } from \"../i18n-types\";\r\n\r\nconst fa: BaseTranslation = {\r\n  pages: {\r\n    home: {\r\n      homeTitle: \"بهترین های رفع تحریم\",\r\n      connectedHTML: \"شما به  <u>{currentActive}</u> متصل شدید\",\r\n      connected: \"شما به  {currentActive} متصل شدید\",\r\n      disconnected: \"قطع شد.\",\r\n      unknownServer: \"به یک سرور  ناشناخته متصل هستید.\",\r\n    },\r\n    settings: {\r\n      title: \"تنظیمات\",\r\n      autoRunningTitle: \"اجرا شدن خودکار برنامه با روشن شدن سیستم\",\r\n      langChanger: \"تغییر زبـان\",\r\n      themeChanger: \"تغییر پوسته\",\r\n    },\r\n    addCustomDns: {\r\n      NameOfServer: \"نام سرور\",\r\n      serverAddr: \"آدرس سرور\",\r\n    },\r\n  },\r\n  themeChanger: {\r\n    dark: \"تاریک\",\r\n    light: \"روشـن\",\r\n  },\r\n  buttons: {\r\n    update: \"بروز رسانی لیست\",\r\n    favDnsServer: \"افزودن سرور (DNS) دلخواه\",\r\n    add: \"افزودن\",\r\n    flushDns: \"پاکسازی (Flush)\",\r\n    ping: \"پیـنگ سرورها\",\r\n  },\r\n  dialogs: {\r\n    fetching_data_from_repo: \"درحال دریافت دیتا از مخزن\",\r\n    added_server: \"سرور {serverName} با موفقیت اضافه شد.\",\r\n    removed_server: \"سرور {serverName} با موفقیت حذف شد.\",\r\n    flush_successful: \"پاکسازی با موفقیت انجام شد.\",\r\n    flush_failure: \"پاکسازی ناموفق بود.\",\r\n  },\r\n  errors: {\r\n    error_fetching_data: \"خطا در دریافت دیتا از {target}\",\r\n  },\r\n  connecting: \"درحال اتصال...\",\r\n  disconnecting: \"قطع شدن...\",\r\n  waiting: \"کمی صبر کنید...\",\r\n  successful: \"موفقیت آمیز\",\r\n  help_connect: \"برای اتصال کلیک کنید\",\r\n  help_disconnect: \"برای قطع اتصال کلیک کنید\",\r\n  validator: {\r\n    invalid_dns1: \"آدرس سرور 1 نامعتبر است.\",\r\n    invalid_dns2: \"آدرس سرور 2 نامعتبر است.\",\r\n    dns1_dns2_duplicates: \"آدرس سرورهای 1 و 2 نباید تکراری باشند.\",\r\n  },\r\n  version: \"نسخه\",\r\n};\r\n\r\nexport default fa;\r\n","import { BaseTranslation, Translation } from \"../i18n-types\";\r\n\r\nconst ru: Translation = {\r\n  pages: {\r\n    home: {\r\n      homeTitle: \"Лучшее снятие санкций\",\r\n      connectedHTML: \"Вы подключены к <u>{currentActive}</u> \",\r\n      connected: \"Вы подключены к {currentActive}\",\r\n      disconnected: \"Прервано\",\r\n      unknownServer: \"Вы подключены к неизвестному серверу\",\r\n    },\r\n    settings: {\r\n      title: \"Настройки\",\r\n      autoRunningTitle:\r\n        \"Автоматическое выполнение программы при включении системы\",\r\n      langChanger: \"Изменить язык\",\r\n      themeChanger: \"менять тему\",\r\n    },\r\n    addCustomDns: {\r\n      NameOfServer: \"имя сервера\",\r\n      serverAddr: \"адрес сервера\",\r\n    },\r\n  },\r\n  themeChanger: {\r\n    dark: \"темный\",\r\n    light: \"свет\",\r\n  },\r\n  buttons: {\r\n    update: \"список обновлений\",\r\n    favDnsServer: \"добавить собственный (DNS) сервер\",\r\n    add: \"добавлять\",\r\n    flushDns: \"очистить (Flush)\",\r\n    ping: \"серверы пингуются\",\r\n  },\r\n  dialogs: {\r\n    fetching_data_from_repo: \"получение данных из репозитория\",\r\n    added_server: \"{serverName} сервер успешно добавлен\",\r\n    removed_server: \"{serverName} сервер успешно удален\",\r\n    flush_successful: \"очистка успешно завершена\",\r\n    flush_failure: \"очистка не удалась\",\r\n  },\r\n  errors: {\r\n    error_fetching_data: \"Ошибка при получении данных от {target}\",\r\n  },\r\n  connecting: \"подключение...\",\r\n  disconnecting: \"отключение...\",\r\n  waiting: \"пожалуйста, подождите...\",\r\n  successful: \"успешный\",\r\n  help_connect: \"нажмите, чтобы подключиться\",\r\n  help_disconnect: \"нажмите, чтобы отключить\",\r\n  validator: {\r\n    invalid_dns1: \"DNS-значение 1 недопустимо.\",\r\n    invalid_dns2: \"DNS-значение 2 недопустимо.\",\r\n    dns1_dns2_duplicates: \"Значения DNS 1 и DNS 2 не должны совпадать.\",\r\n  },\r\n  version: \"версия\",\r\n};\r\n\r\nexport default ru;\r\n","// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.\r\n/* eslint-disable */\r\n\r\nimport { initFormatters } from './formatters'\r\nimport type { Locales, Translations } from './i18n-types'\r\nimport { loadedFormatters, loadedLocales, locales } from './i18n-util'\r\n\r\nimport eng from './eng'\r\nimport fa from './fa'\r\nimport ru from './ru'\r\n\r\nconst localeTranslations = {\r\n\teng,\r\n\tfa,\r\n\tru,\r\n}\r\n\r\nexport const loadLocale = (locale: Locales): void => {\r\n\tif (loadedLocales[locale]) return\r\n\r\n\tloadedLocales[locale] = localeTranslations[locale] as unknown as Translations\r\n\tloadFormatters(locale)\r\n}\r\n\r\nexport const loadAllLocales = (): void => locales.forEach(loadLocale)\r\n\r\nexport const loadFormatters = (locale: Locales): void =>\r\n\tvoid (loadedFormatters[locale] = initFormatters(locale))\r\n","// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.\r\n/* eslint-disable */\r\n\r\nimport { i18n } from './i18n-util'\r\nimport { loadAllLocales } from './i18n-util.sync'\r\nimport type { LocaleTranslationFunctions } from 'typesafe-i18n'\r\nimport type { Locales, Translations, TranslationFunctions } from './i18n-types'\r\n\r\nloadAllLocales()\r\n\r\nexport const L: LocaleTranslationFunctions<Locales, Translations, TranslationFunctions> = i18n()\r\n\r\nexport default L","import electronLog from \"electron-log\"\r\n\r\nfunction createLogger(logId:string): electronLog.Logger{\r\n    return electronLog.create({ logId  })\r\n}\r\n\r\nexport const userLogger: electronLog.Logger = createLogger(\"user\")\r\n","import { BrowserWindow, nativeImage } from \"electron\";\r\n\r\nexport function updateOverlayIcon(\r\n  win: BrowserWindow,\r\n  filePath: string | null,\r\n  description: string | \"connected\" | \"disconnect\"\r\n) {\r\n  const icon = filePath ? nativeImage.createFromPath(filePath) : null;\r\n  win.setOverlayIcon(icon, description);\r\n}\r\n","import _ from \"lodash\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { store } from \"../store/store\";\r\nimport { ipcMain, shell, dialog, BrowserWindow } from \"electron\";\r\n\r\nimport { dnsService } from \"../config\";\r\nimport { Server, ServerStore } from \"../../shared/interfaces/server.interface\";\r\nimport { EventsKeys } from \"../../shared/constants/eventsKeys.constant\";\r\nimport { isValidDnsAddress } from \"../../shared/validators/dns.validator\";\r\nimport LN from \"../../i18n/i18n-node\";\r\nimport { Locales } from \"../../i18n/i18n-types\";\r\nimport pingLib from \"ping\";\r\nimport { userLogger } from \"../shared/logger\";\r\nimport { getOverlayIcon } from \"../shared/file\";\r\nimport { updateOverlayIcon } from \"../shared/overlayIcon\";\r\nimport { trackEvent } from \"@aptabase/electron/main\";\r\n\r\n// todo Refactoring\r\n\r\nipcMain.handle(EventsKeys.SET_DNS, async (event, server: Server) => {\r\n  try {\r\n    await dnsService.setDns(server.servers);\r\n    const currentLng = LN[getCurrentLng()];\r\n    const win = BrowserWindow.getAllWindows()[0];\r\n    const filepath = await getOverlayIcon(server);\r\n    updateOverlayIcon(win, filepath, \"connected\");\r\n\r\n    if (store.get(\"settings\").use_analytic)\r\n      trackEvent(`USE_DNS:${server.name}`, {\r\n        servers: server.servers.toString(),\r\n      }).catch();\r\n    return {\r\n      server,\r\n      success: true,\r\n      message: currentLng.pages.home.connected({\r\n        currentActive: server.name,\r\n      }),\r\n    };\r\n  } catch (e: any) {\r\n    userLogger.error(e.stack, e.message);\r\n    return {\r\n      server,\r\n      success: false,\r\n      message: \"Unknown error while connecting\",\r\n    };\r\n  }\r\n});\r\n\r\nipcMain.handle(EventsKeys.CLEAR_DNS, async (event, server: Server) => {\r\n  try {\r\n    await dnsService.clearDns();\r\n    const currentLng = LN[getCurrentLng()];\r\n    const win = BrowserWindow.getAllWindows()[0];\r\n    updateOverlayIcon(win, null, \"disconnect\");\r\n    return {\r\n      server,\r\n      success: true,\r\n      message: currentLng.pages.home.disconnected(),\r\n    };\r\n  } catch (e: any) {\r\n    userLogger.error(e.stack, e.message);\r\n    return { server, success: false, message: \"Unknown error while clear DNS\" };\r\n  }\r\n});\r\n\r\nipcMain.handle(EventsKeys.ADD_DNS, async (event, data: Partial<Server>) => {\r\n  // validators ..\r\n  const nameServer1 = data.servers[0];\r\n  const nameServer2 = data.servers[1];\r\n\r\n  const currentLng = LN[getCurrentLng()];\r\n\r\n  if (!isValidDnsAddress(nameServer1))\r\n    return { success: false, message: currentLng.validator.invalid_dns1 };\r\n\r\n  if (nameServer2 && !isValidDnsAddress(nameServer2))\r\n    return { success: false, message: currentLng.validator.invalid_dns2 };\r\n\r\n  if (nameServer1.toString() == nameServer2.toString())\r\n    return {\r\n      success: false,\r\n      message: currentLng.validator.dns1_dns2_duplicates,\r\n    };\r\n\r\n  const newServer: ServerStore = {\r\n    key: data.key || uuid(),\r\n    name: data.name,\r\n    avatar: data.avatar,\r\n    servers: data.servers,\r\n    rate: data.rate || 0,\r\n    tags: data.tags || [],\r\n    isPin: false,\r\n  };\r\n\r\n  const list: Server[] = store.get(\"dnsList\") || [];\r\n  const isDupKey = list.find((s) => s.key == newServer.key);\r\n  if (isDupKey) newServer.key = uuid();\r\n\r\n  list.push(newServer);\r\n\r\n  store.set(\"dnsList\", list);\r\n  return { success: true, server: newServer, servers: list };\r\n});\r\n\r\nipcMain.handle(EventsKeys.DELETE_DNS, (ev: any, server: Server) => {\r\n  const dnsList = store.get(\"dnsList\");\r\n\r\n  _.remove(dnsList, (dns) => dns.key === server.key);\r\n\r\n  store.set(\"dnsList\", dnsList);\r\n\r\n  return {\r\n    success: true,\r\n    servers: dnsList,\r\n  };\r\n});\r\n\r\nipcMain.handle(\r\n  EventsKeys.RELOAD_SERVER_LIST,\r\n  async (event, servers: Server[]) => {\r\n    store.set(\"dnsList\", servers);\r\n    return { success: true };\r\n  }\r\n);\r\n\r\nipcMain.handle(EventsKeys.FETCH_DNS_LIST, () => {\r\n  const servers = store.get(\"dnsList\") || [];\r\n  return { success: true, servers: servers };\r\n});\r\n\r\nipcMain.on(EventsKeys.GET_CURRENT_ACTIVE, getCurrentActive);\r\nipcMain.handle(EventsKeys.GET_CURRENT_ACTIVE, getCurrentActive);\r\n\r\nipcMain.on(EventsKeys.OPEN_BROWSER, (ev, url) => {\r\n  shell.openExternal(url);\r\n});\r\n\r\nipcMain.on(\r\n  EventsKeys.DIALOG_ERROR,\r\n  (ev: any, title: string, message: string) => {\r\n    dialog.showErrorBox(title, message);\r\n  }\r\n);\r\n\r\nipcMain.handle(EventsKeys.FLUSHDNS, async function (evet, _: any) {\r\n  try {\r\n    await dnsService.flushDns();\r\n    return { success: true };\r\n  } catch {\r\n    return { success: false };\r\n  }\r\n});\r\n\r\nipcMain.handle(EventsKeys.PING, async function (event, server: Server) {\r\n  try {\r\n    const result = await pingLib.promise.probe(server.servers[0], {\r\n      timeout: 10,\r\n    });\r\n    return {\r\n      success: true,\r\n      data: {\r\n        alive: result.alive,\r\n        time: result.time,\r\n      },\r\n    };\r\n  } catch {\r\n    return {\r\n      success: false,\r\n    };\r\n  }\r\n});\r\nipcMain.handle(EventsKeys.TOGGLE_PIN, async function (event, server: Server) {\r\n  const dnsList: ServerStore[] = store.get(\"dnsList\");\r\n  const serverStore = dnsList.find((ser) => ser.key === server.key);\r\n  if (serverStore) {\r\n    serverStore.isPin = !serverStore.isPin;\r\n    store.set(\"dnsList\", dnsList);\r\n\r\n    return {\r\n      success: true,\r\n      servers: dnsList,\r\n    };\r\n  }\r\n});\r\n\r\nipcMain.handle(EventsKeys.GET_NETWORK_INTERFACE_LIST, () => {\r\n  return dnsService.getInterfacesList();\r\n});\r\nfunction getCurrentLng(): Locales {\r\n  return store.get(\"settings\").lng;\r\n}\r\nasync function getCurrentActive(): Promise<any> {\r\n  try {\r\n    const dns: string[] = await dnsService.getActiveDns();\r\n\r\n    if (!dns.length) return { success: false, server: null };\r\n\r\n    const servers = store.get(\"dnsList\") || [];\r\n    const server: ServerStore | null = servers.find(\r\n      (server) => server.servers.toString() == dns.toString()\r\n    );\r\n\r\n    if (!server)\r\n      return {\r\n        success: true,\r\n        server: {\r\n          key: \"unknown\",\r\n          servers: dns,\r\n          names: {\r\n            eng: \"unknown\",\r\n            fa: \"unknown\",\r\n          },\r\n          avatar: \"\",\r\n          isPin: false,\r\n        },\r\n      };\r\n    else {\r\n      const win = BrowserWindow.getAllWindows()[0];\r\n      const filepath = await getOverlayIcon(server);\r\n      updateOverlayIcon(win, filepath, \"connected\");\r\n      return { success: true, server };\r\n    }\r\n  } catch (e: any) {\r\n    userLogger.error(e.stack, e.message);\r\n    return { success: false, message: \"Unknown error while clear DNS\" };\r\n  }\r\n}\r\n","import {\r\n  app,\r\n  BrowserWindow,\r\n  shell,\r\n  ipcMain,\r\n  Tray,\r\n  Menu,\r\n  nativeImage,\r\n} from \"electron\";\r\nimport { release } from \"node:os\";\r\nimport { join } from \"node:path\";\r\nimport { getIconPath } from \"./shared/getIconPath\";\r\nimport { update } from \"./update\";\r\nimport { config } from \"dotenv\";\r\nimport isDev from \"electron-is-dev\";\r\nimport { store } from \"./store/store\";\r\nimport { EventsKeys } from \"../shared/constants/eventsKeys.constant\";\r\nimport { getPublicFilePath } from \"./shared/file\";\r\nimport os from \"os\";\r\nimport { initialize } from \"@aptabase/electron/main\";\r\nimport { trackEvent } from \"@aptabase/electron/main\";\r\n\r\nconfig();\r\nif (isDev)\r\n  Object.defineProperty(app, \"isPackaged\", {\r\n    get() {\r\n      return true;\r\n    },\r\n  });\r\n\r\nprocess.env.DIST_ELECTRON = join(__dirname, \"../\");\r\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\r\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\r\n  ? join(process.env.DIST_ELECTRON, \"../public\")\r\n  : process.env.DIST;\r\n\r\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\r\n\r\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit();\r\n  process.exit(0);\r\n}\r\n\r\nlet win: BrowserWindow | null = null;\r\nconst preload = join(__dirname, \"../preload/index.js\");\r\nconst url = process.env.VITE_DEV_SERVER_URL;\r\nconst indexHtml = join(process.env.DIST, \"index.html\");\r\nconst icon = nativeImage.createFromPath(getIconPath());\r\ninitialize(\"A-EU-0537046370\");\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: \"Dock Studio\",\r\n    icon: icon,\r\n    height: 483,\r\n    width: 743,\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: true,\r\n      devTools: isDev,\r\n    },\r\n    darkTheme: true,\r\n    resizable: false,\r\n    //center: !isDev, // => false\r\n    show: true,\r\n\r\n    alwaysOnTop: isDev,\r\n    movable: true,\r\n    frame: false,\r\n    titleBarStyle: \"hidden\",\r\n  });\r\n  // hides the traffic lights\r\n\r\n  if (os.platform() == \"darwin\") win.setWindowButtonVisibility(false);\r\n\r\n  win.setMenu(null);\r\n  if (url) {\r\n    await win.loadURL(url);\r\n  } else {\r\n    await win.loadFile(indexHtml);\r\n  }\r\n  if (isDev) win.webContents.openDevTools();\r\n\r\n  win.webContents.on(\"did-finish-load\", () => {\r\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\r\n  });\r\n\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\r\n    return { action: \"deny\" };\r\n  });\r\n\r\n  let tray = null;\r\n  ipcMain.on(\"close\", function (event) {\r\n    if (!store.get(\"settings\").minimize_tray) return app.exit(0);\r\n    event.preventDefault();\r\n    win.setSkipTaskbar(false);\r\n    if (!tray) tray = createTray();\r\n    win.hide();\r\n  });\r\n\r\n  update(win, app);\r\n  await trackEvent(`app_started__${app.getVersion()}`);\r\n  return win;\r\n}\r\nipcMain.on(EventsKeys.MINIMIZE, () => {\r\n  app.focus();\r\n  win.isMinimized() ? win.focus() : win.minimize();\r\n});\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  win = null;\r\n  if (process.platform !== \"darwin\") app.quit();\r\n});\r\n\r\napp.on(\"second-instance\", () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore();\r\n    win.focus();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  const allWindows = BrowserWindow.getAllWindows();\r\n  if (allWindows.length) {\r\n    allWindows[0].focus();\r\n  } else {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle(\"open-win\", (_, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  });\r\n\r\n  if (process.env.VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${url}#${arg}`);\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg });\r\n  }\r\n});\r\n\r\nimport \"./ipc/setting\";\r\nimport \"./ipc/ui\";\r\nimport \"./ipc/notif\";\r\nimport \"./ipc/dialogs\";\r\n\r\nfunction createTray() {\r\n  const appIcon = new Tray(icon);\r\n  const showIcon = nativeImage.createFromPath(\r\n    getPublicFilePath(\"icons/show.png\")\r\n  );\r\n  const powerIcon = nativeImage.createFromPath(\r\n    getPublicFilePath(\"icons/power.png\")\r\n  );\r\n\r\n  const contextMenu = Menu.buildFromTemplate([\r\n    {\r\n      label: \"Dock Studio\",\r\n      enabled: false,\r\n      icon: icon.resize({ height: 19, width: 19 }),\r\n    },\r\n    {\r\n      label: \"Show\",\r\n      icon: showIcon,\r\n      click: function () {\r\n        win.show();\r\n        ipcMain.emit(EventsKeys.GET_CURRENT_ACTIVE);\r\n      },\r\n    },\r\n    {\r\n      label: \"Quit Dock Studio\",\r\n      icon: powerIcon,\r\n      click: function () {\r\n        app.exit(1);\r\n      },\r\n    },\r\n  ]);\r\n\r\n  appIcon.on(\"double-click\", function (event) {\r\n    win.show();\r\n    ipcMain.emit(EventsKeys.GET_CURRENT_ACTIVE);\r\n  });\r\n  appIcon.setToolTip(\"Dock Studio\");\r\n  appIcon.setContextMenu(contextMenu);\r\n  return appIcon;\r\n}\r\n"],"names":["icon","EventsKeys","win","autoUpdater","path","x","ipcMain","update","join","P","N","O","d","A","w","platform","promisify","exec","app","nativeTheme","nativeImage","Notification","isIPv4","initI18n","LN","BrowserWindow","trackEvent","uuid","_","url","shell","dialog","server","config","release","initialize","Tray","Menu"],"mappings":"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","x_google_ignoreList":[7]}